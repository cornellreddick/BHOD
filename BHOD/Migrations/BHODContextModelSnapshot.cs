// <auto-generated />
using System;
using BHOD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BHOD.Migrations
{
    [DbContext(typeof(BHODContext))]
    partial class BHODContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BHOD.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PaymentMethodId");

                    b.Property<int>("ShopPersonalId");

                    b.Property<DateTime>("Since");

                    b.Property<DateTime>("Until");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShopPersonalId");

                    b.ToTable("Appointmentses");
                });

            modelBuilder.Entity("BHOD.Models.AppointmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CheckedIn")
                        .IsRequired();

                    b.Property<DateTime>("CheckedOut");

                    b.Property<int>("PaymentId");

                    b.Property<int>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShopId");

                    b.ToTable("AppointmentHistories");
                });

            modelBuilder.Entity("BHOD.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("PaymentMethodId");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("ShopId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShopId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BHOD.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Charges");

                    b.Property<DateTime>("Created");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("BHOD.Models.PreBookedAppointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PaymentMethodId");

                    b.Property<DateTime>("PreBookedPlaced");

                    b.Property<int?>("ShopPersonalId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShopPersonalId");

                    b.ToTable("PreBookedAppointmentses");
                });

            modelBuilder.Entity("BHOD.Models.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("BHOD.Models.ShopHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CloseTime");

                    b.Property<int>("DayOfWeek");

                    b.Property<int?>("LocationId");

                    b.Property<int>("OpenTime");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ShopHourses");
                });

            modelBuilder.Entity("BHOD.Models.ShopPersonal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<int?>("LocationId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<string>("ShopName")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ShopPersonals");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ShopPersonal");
                });

            modelBuilder.Entity("BHOD.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("BHOD.Models.Barber", b =>
                {
                    b.HasBaseType("BHOD.Models.ShopPersonal");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.ToTable("Barber");

                    b.HasDiscriminator().HasValue("Barber");
                });

            modelBuilder.Entity("BHOD.Models.Hairstylist", b =>
                {
                    b.HasBaseType("BHOD.Models.ShopPersonal");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("Hairstylist_FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("Hairstylist_LastName");

                    b.ToTable("Hairstylist");

                    b.HasDiscriminator().HasValue("Hairstylist");
                });

            modelBuilder.Entity("BHOD.Models.Appointment", b =>
                {
                    b.HasOne("BHOD.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Appointments")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("BHOD.Models.ShopPersonal", "ShopPersonal")
                        .WithMany()
                        .HasForeignKey("ShopPersonalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BHOD.Models.AppointmentHistory", b =>
                {
                    b.HasOne("BHOD.Models.PaymentMethod", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BHOD.Models.ShopPersonal", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BHOD.Models.Customer", b =>
                {
                    b.HasOne("BHOD.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("BHOD.Models.Shop", "Shop")
                        .WithMany("Hairstylist")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("BHOD.Models.PreBookedAppointments", b =>
                {
                    b.HasOne("BHOD.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("BHOD.Models.ShopPersonal", "ShopPersonal")
                        .WithMany()
                        .HasForeignKey("ShopPersonalId");
                });

            modelBuilder.Entity("BHOD.Models.ShopHours", b =>
                {
                    b.HasOne("BHOD.Models.Shop", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("BHOD.Models.ShopPersonal", b =>
                {
                    b.HasOne("BHOD.Models.Shop", "Location")
                        .WithMany("ShopPersonal")
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
